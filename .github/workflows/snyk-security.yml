name: Snyk Security

on:
  push:
    branches: ["main" ]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  snyk:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@master
        
      - name: Set up Snyk CLI to check for security issues
        # Snyk can be used to break the build when it detects security issues.
        # In this case we want to upload the SAST issues to GitHub Code Scanning
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb

        # For Snyk Open Source you must first set up the development environment for your application's dependencies
        # For example for Node
        #  - uses: actions/setup-node@v3
        #    with:
        #      node-version: 16
      - name: Install dependencies
        run: npm install   
        
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        
        env:
          # This is where you will need to introduce the Snyk API token created with your Snyk account
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif

        # Runs Snyk Code (SAST) analysis and uploads result into GitHub.
        # Use || true to not fail the pipeline
      - name: Snyk Code test
        run: snyk code test --sarif > snyk-code.sarif || true

        # Runs Snyk Open Source (SCA) analysis and uploads result to Snyk.
        #  - name: Snyk Open Source monitor
        #    run: snyk monitor --all-projects

        # Runs Snyk Infrastructure as Code (IaC) analysis and uploads result to Snyk.
        # Use || true to not fail the pipeline.
      - name: Snyk IaC test and report
        run: snyk iac test --report || true

        # Build the docker image for testing
      - name: Build docker image
        working-directory: ./
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          DOCKER_BUILDKIT: 1
          IMAGE_TAG: ${GITHUB_SHA::8}
        run: |
          docker build -f ${{ matrix.repository }}.Dockerfile \
            -t $ECR_REGISTRY/${{ matrix.repository }}:${{ env.IMAGE_TAG }} .

          docker tag $ECR_REGISTRY/${{ matrix.repository }}:${{ env.IMAGE_TAG }} \
            $ECR_REGISTRY/${{ matrix.repository }}:latest

      - name: Security scan on docker image
        uses: snyk/actions/docker@master
        id: docker-image-scan
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ steps.login-ecr.outputs.registry }}/${{ matrix.repository }}
          args: --file=./${{ matrix.repository }}.Dockerfile 
            --severity-threshold=low
            --sarif-file-output=./${{ matrix.repository }}/docker.snyk.sarif
          sarif: false

      - name: Upload sarif file to Github Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ./${{ matrix.repository }}

      - name: Check docker image scan status
        if: ${{ steps.docker-image-scan.outcome == 'failure' }}
        run: exit 1


      - name: Publish docker image
        if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
        run: docker push --all-tags ${{ steps.login-ecr.outputs.registry }}/${{ matrix.repository }}



